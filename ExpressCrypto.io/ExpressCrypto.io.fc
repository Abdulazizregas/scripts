
//==================//
//script Written by: ••AviramDayan•• 05/01/2020 00:05PM - Version 1
//Last Update: 23/08/2020 00:35PM - Version 2
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class ExpressCrypto : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://ExpressCrypto.io")
            {
                new FaucetSetting(){Name="Email",Display="UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                //new FaucetSetting(){Name="Address",Display="Address HORIZEN - ZEN ",Type=EditorType.TextBox,Required=true},
				
                new FaucetSetting(){Name="Paid_To_Click",Display="Paid_To_Click",Type=EditorType.CheckBox,Default=true},
				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Express Crypto";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*";  //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {

	   
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		return ElementByXPath("//i[contains(@class,'fa-power-off')] ")!= null;
		//return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
	
	
	

	
//=============//
//start DoLogin
//=============//
    public override int DoLogin()
    {


	 //var checks login or exit
     var ExitButton = ElementByXPath("//i[contains(@class,'fa-power-off')] "); //SIGN OUT

		 
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {
		
        //else go to normal login
		GoToUrl("https://expresscrypto.io/login");
        Wait();	
	    Wait(2);		
	
        if (IsVisible(ElementByXPath ("//input[@placeholder='Username']") )) 
	    {
         var box_user = ElementByXPath("//input[@placeholder='Username']");
         SetText(box_user, GetSetting("Email"));
	    }
		
        Wait(2);

        if (IsVisible(ElementByXPath ("//input[@placeholder='Password']") )) 
	    {
         var box_pass = ElementByXPath("//input[@placeholder='Password']");
         SetText(box_pass, GetPassword("Pass"));
	    }
		
        Wait(2);

        //solve Captcha X2 XPath (1 = captcha image | 2 = input text )
        var result = DoSolveImageCaptcha(ElementByXPath("//span[@class='input-group-addon']/img"),ElementByXPath("//input[@name='captcha']")); 

        if (result > 0)
        {
           return Fail("fail not solve"); //return to solve again - if something wrong
        }

        Wait(2);
				
        if (IsVisible(ElementByXPath ("//button[@type='submit' and contains(text(),'Login')]") )) 
	    {
        var ButtonLog = ElementByXPath("//button[@type='submit' and contains(text(),'Login')]");
        Click(ButtonLog);
	    }
		
        Wait();		
	
	 }	//end ExitButton
 
	 
        //This faucet has nothing to do here.    
        return base.DoLogin();
    }
//=============//
//start DoLogin
//=============//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();  

    }	//end ad
		
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
  public override int DoSolveFaucet()
  {

      //=============//
      //Paid_To_Click
      //=============//
         if (GetBoolSetting("Paid_To_Click"))
         {
           Title = "Express Crypto";
		   GoToUrl("https://expresscrypto.io/offerwalls/ptc");
           Log("Paid_To_Click");	
           Wait();	
	       Wait(2);	
			
           var ClaimNow_Available = ElementByXPath ("//div[*]//button/b[contains(text(),'Claim')]") ;
	       if (IsVisible(ClaimNow_Available))
	       {
		     Log("Paid_To_Click - Available");
			 
             var TimeToWaitForBreak = DateTime.Now.AddSeconds(260);
			 
             while (true)
             {
               Title = "";
               var Bonus_Available = ElementByXPath("//div[*]//button/b[contains(text(),'Claim')]") ;
		       Click(Bonus_Available);
		       Log("Paid_To_Click - Bonus_Available");
               Wait();
               Wait(2);
		       Log("Paid_To_Click - do function");
			   
               ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
               bypasser.DoShortLink();
			   
               Wait();
               Wait(2);
               Title = "Express Crypto";
		       GoToUrl("https://expresscrypto.io/offerwalls/ptc");
			   Driver.Navigate().Refresh(); //refresh page
               Wait(3);
			   
               if (!IsVisible(ElementByXPath ("//div[*]//button/b[contains(text(),'Claim')]")  )) 
	           {
		         Log("Paid_To_Click - break - not Available");
                 break; //after break the while  
	           }

               if (DateTime.Now > TimeToWaitForBreak) //if the time above 260 sec 
               {
		       Log("Paid_To_Click - break - TimeToWaitForBreak");
               break; //break the wait loop
               }
			   
             } //end while (true)
			 
	       } // end ClaimNow_Available
         } //end Paid_To_Click
      //=============//
	  
   ClaimSuccess(); //Marks the claim as a success
   return GetWaitSetting();  

  //This faucet has nothing to do here. We will let Faucet Collector handle it.
  return base.DoSolveFaucet();
  }
	
	
	

    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	

	
	
} //public class
