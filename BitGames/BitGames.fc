using System;
using FaucetCollector.Script;

public class faucetgame : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.bitgames.io")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting()
                {Name="FM",Display="Claim every 60 minutes",Type=EditorType.CheckBox,Default=false,
                }
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start( )
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title="Bitgames";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath="//span[@class='timer']";
        FailXPath="//span[@class='fail_I']";

        //Let Faucet Collector start up everything
        base.Start( );
    }

    public override bool IsLoggedIn( )
    {
        Driver.SwitchTo( ).DefaultContent( );
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(@href,'logout')]")!=null;
    }

    public override int DoLogin( )
    {
        var form = ElementByXPath("//a[@class='btn-login btn-primary btn active']");
        if ( !IsVisible(form) )
        {
            return Fail("Fail form button not found");
        }
        Click(form);
        Wait(2 , 3);
        var textboxuser = ElementByXPath("//input[@id='navbar_username']");
        if ( !IsVisible(textboxuser) )
        {
            return Fail("Textbox user not found");
        }
        SetText(textboxuser , GetSetting("User"));
        Wait( );
        var passboxuser = ElementByXPath("//input[@id='navbar_password']");
        if ( !IsVisible(passboxuser) ) {
            return Fail("Passbox not found");

        }
        SetText(passboxuser , GetPassword("Pass"));
        Wait( );
        var button = ElementByXPath("//input[@class='btn btn-primary']");
        if ( !IsVisible(button) )
        {
            return Fail("Button not visilbe");
        }
        Click(button);
        Wait( );
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin( );
    }


    public override int GetFaucetWaitTime( )
    {
        if ( !Driver.Url.Contains("https://www.bitgames.io/play/bt/bt-faucet") )

        {
            GoToUrl("https://www.bitgames.io/play/bt/bt-faucet");
        }
        Wait(2 , 3);
        try
        {
            Driver.SwitchTo( ).DefaultContent( );

            Driver.SwitchTo( ).Frame(ElementByXPath("//iframe[@id='iframe']"));
            Wait( );
            var timer = ElementByXPath("//span[@class='timer']");
            if ( timer!=null )
            {
                try
                {
                    int h = Convert.ToInt32(timer.Text.Split(':')[0]) * 3600;
                    int m = Convert.ToInt32(timer.Text.Split(':')[1]) * 60;
                    int s = Convert.ToInt32(timer.Text.Split(':')[2]);
                    return h+m+s;
                }
                catch ( Exception )
                {
                    return 600;
                }

            }
            else
            {
                return 0;
            }
        }
        catch ( Exception )
        {
            return 0;
        }

        //let Faucet Collector continue.
        return base.GetFaucetWaitTime( );
    }

    public override int DoSolveFaucet( )
    {
        GoToUrl("https://www.bitgames.io/offerwalls/faucet/");
        Wait(3 , 5);

        try
        {
            Driver.SwitchTo( ).DefaultContent( );
            Driver.SwitchTo( ).Frame(ElementByXPath("//iframe[@id='iframe-offerwalls']"));

            Wait( );

            ManageChangeSettings( );



            Wait(3 , 4);
            var btnmine = ElementByXPath("//a[@class='btn-mine']");
            while ( IsVisible(btnmine) )
            {
                Click(btnmine);
                btnmine=ElementByXPath("//a[@class='btn-mine']");
                Wait( );
            }
            var result = DoSolveCaptcha();
            if ( result>0 )
            {
                return Fail("Fail solve captcha");
            }
            Wait(2 , 3);
            var button_claim = ElementByName("btn_solve");
            if ( IsVisible(button_claim) )
            {
                Click(button_claim);
            }
        }
        catch ( Exception )
        {
            Log("Game frame not found");
        }
        Wait( );
        Driver.SwitchTo( ).DefaultContent( );





        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha( );
    }

    private bool ShouldChangeSettings { get{

            string requiredText=GetBoolSetting("FM")?"60":"10";

            var activeSetting= ElementByXPath("//div[@class='faucet-box--active']//span");

            if ( !IsVisible(activeSetting) || !activeSetting.Text.Contains(requiredText))
            {
                return false;
            }
            return true;
    }}


    private void ManageChangeSettings( )
    {
        if ( ShouldChangeSettings )  
        {
            var ChangeElem = ElementByXPath("//div[contains(@class,'faucet-box') and not(contains(@class,'faucet-box--active'))]");
            if ( !IsVisible(ChangeElem) )
            {
                return;
            }
            Click(ChangeElem);
            Wait(2);
        }
    }
    public override int CheckFaucetResult()
    {
        Driver.SwitchTo().DefaultContent();
        Driver.SwitchTo().Frame(ElementByXPath("//iframe[@id='iframe-offerwalls']"));
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
