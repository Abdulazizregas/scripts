using FaucetCollector.Script;
using System;
using System.Linq;
using System.Threading.Tasks;
//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha


public class worldofbitcoScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://worldofbitco.in")
            {
                new FaucetSetting(){Name="User",Display="Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Bonus",Display="Bonus - on/off",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw - on/off",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="LimiToWithdraw",Display="LimiToWithdraw - the Default is 1000 (you can change the limit, Less than 1000 if it's possible in the website)",Type=EditorType.TextBox,Default="1000"},

                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }
	
	

//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Get";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='additionally success' and contains(text(),'satoshi')]";
        FailXPath = "//div[@class='additionally error']"; 

        //Let Faucet Collector start up everything
        base.Start();
    }


    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@id='signout']") != null;
    }

//=======//
//DoLogin
//=======//
    public override int DoLogin()
    {
        var WalletAddress = ElementByXPath("//input[@id='addressField']");
        if ( !IsVisible(WalletAddress) )
        {
            return Fail("Wallet address is not visible");
        }
        SetText(WalletAddress , GetSetting("User"));
        Wait(1);
        var buttonLogin = ElementByXPath("//input[@id='signin']");
        if ( !IsVisible(buttonLogin) )
        {
            return Fail("Button login is not visible");
        }
        Click(buttonLogin);
        Wait(1);
        var Login2 = ElementByXPath("//div[contains(@id,'captchaButton')]");
        if ( IsVisible(Login2) )
        {
            Click(Login2);
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin( );
    }
//=======//
//DoLogin
//=======//



//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {
        var timer = ElementByXPath("//div[@id='claim' and contains(text(),':')]");
        if ( IsVisible(timer) )
        {
            try
            {
                var Splited=timer.Text.Replace(" ","").Split(':');
                int sec,min;
                if ( int.TryParse(Splited[1] , out sec)&&int.TryParse(Splited[0] , out min) )
                {
                    return sec+min*60;
                }

            }
            catch ( Exception )
            {
                return 300;
            }
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime( );
    }
    public override int DoSolveCaptcha()
    {
        Wait( );
        if ( IsVisible(ElementByXPath("//*[@class='geetest_radar_tip']")) )
        {
            int result = 0;
            FaucetCollector.Captcha.GetestCaptcha getestCaptcha = new FaucetCollector.Captcha.GetestCaptcha(this);
            bool res2=  getestCaptcha.DoInitSolve();
            Wait(2);
            if ( IsVisible(ElementByXPath("//img[contains(@src,'data:image/png;base64,')]")) )
            {
                FaucetCollector.Captcha.AntibotLinksImageType.AntiBotLinksUtility solver = new FaucetCollector.Captcha.AntibotLinksImageType.AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if ( !res||!res2 )
                {
                    result=1;
                }
            }
            return result;
        }
        if ( IsVisible(ElementByXPath("//iframe[contains(@src,'bit-puzzle')]")) )
        {
            int result = 0;
            FaucetCollector.Captcha.AntibotLinksImageType.PuzzleBall puzzleBallSolver = new FaucetCollector.Captcha.AntibotLinksImageType.PuzzleBall(this);
            puzzleBallSolver.DoSolve( );
            Wait(1);
            if ( IsVisible(ElementByXPath("//img[contains(@src,'data:image/png;base64,')]")) )
            {
                FaucetCollector.Captcha.AntibotLinksImageType.AntiBotLinksUtility solver = new FaucetCollector.Captcha.AntibotLinksImageType.AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if ( !res )
                {
                    result=1;
                }
            }
            return result;
        }
        else
        {
            Task<int> extraTask = null;
            extraTask=Task.Run(( ) =>
            {
                return base.DoSolveCaptcha( );
            });
            var result = 0;
            if ( IsVisible(ElementByXPath("//img[contains(@src,'data:image/png;base64,')]")) )
            {
                FaucetCollector.Captcha.AntibotLinksImageType.AntiBotLinksUtility solver = new FaucetCollector.Captcha.AntibotLinksImageType.AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if ( !res )
                {
                    result=1;
                }
            }

            if ( extraTask!=null )
            {

                extraTask.Wait( );


                result+=extraTask.Result;

            }
            return result;
        }

    }



//============//
//DoSolveFaucet
//============//
    public override int DoSolveFaucet()
    {
        Wait( );
        //Bonus
        BonusFunction( ); //call to Function

        var Elem = ElementByXPath("//div[contains(text(),'Click HERE to claim again')]");
        if ( IsVisible(Elem) )
        {
            Click(Elem);
        }

        var ClaimNew = ElementByXPath("//div[@id='claim']");  // if this apper
        if ( IsVisible(ClaimNew) )
        {
            Click(ClaimNew);
        }

        var ClaimButton = ElementByXPath("//div[contains(text(),'Claim your Satoshi') and not(contains(@style,'display: none;'))]");
        if ( IsVisible(ClaimButton) )
        {
            Click(ClaimButton);
        }

        Wait( );

        var result = DoSolveCaptcha();
        if ( result>0 )
        {
            return Fail("Fail solving captcha");
        }
        Wait(3);
        var button = ElementsByXPath("//div[@id='submit']").FirstOrDefault(X=>(IsVisible(X)));
        if ( !IsVisible(button) )
        {
            return Fail("Button submit isn't visible");
        }
        Click(button);

        //SuccessEnd
        var SuccessEnd = ElementByXPath("//div[@class='additionally success' and contains(text(),'satoshi')]");
        if ( IsVisible(SuccessEnd) )
        {
            Log(SuccessEnd.Text);
        }

        Wait( );
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet( );

    }

		//=============//
        //BonusFunction
		//=============//
        private bool BonusFunction()
        {
			
            if (GetBoolSetting("Bonus"))
            {		
	 
            var BonusVar = ElementByXPath("//*[@id='bonusAds']");
            if (IsVisible(BonusVar))
            {
              Click(BonusVar);
              Wait(); 
              var GetBonusVar = ElementByXPath("//input[@id='getBonusBut']");
                if ( IsVisible(GetBonusVar) )
                {
                    Click(GetBonusVar);
                      Wait( );
                    var SuccessFaucet = ElementByXPath("//*[@id='centerArea']/div[2]");
                    if (IsVisible( SuccessFaucet) )
                    {
                        Log(SuccessFaucet.Text);
                        Driver.Navigate( ).Refresh( );
                    }
                   
                }
            
            }
		 
            } // end Bonus
		 
        return true;
        } // end BonusFunction
		//=============//
		
	
} // end class
