
//==================//
//script Written first by: ••cgerabit•• 30/10/2018 10:30AM - Version 1
//Last Update by: ••AviramDayan••: 18/09/2020 02:00AM - Version 10
//==================//

using System;
using FaucetCollector.Script;
//css_inc RecaptchaUtilities
public class TimeBucks : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://timebucks.com/")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Roll",Display="Claim Roll",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="Watch",Display="WathAvaible Videos",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="SlideShows",Display="SlideShows",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="NightFallNews",Display="NightFallNews",Type=EditorType.CheckBox,Default=true},				
                new FaucetSetting(){Name="Clicks",Display="Clicks",Type=EditorType.CheckBox,Default=true},				
                new FaucetSetting(){Name="TT",Display="Time to wait",Type=EditorType.Numeric,Default=60},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "";
        cs = false;
        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; // //span[@id='counter2']
        FailXPath = "//*"; // //span[@id='Failed']

        //Let Faucet Collector start up everything
        base.Start();
    }


    public override int DoInit()
    {

        //Let Faucet Collector continue.
        return base.DoInit();
    }


    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(@href,'action.php?action=logout')]") != null;
    }


    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }


    bool cs;
	
	
//======//
//DoLogin//
//======//
    public override int DoLogin()
    {
		
        var StartLogin = ElementByXPath("//span[contains(@class,'btnLogin')]") ;
        if (IsVisible(StartLogin))
        {
		    Click(StartLogin);
		}

        Wait(3);		
		
        var UsernameBox = ElementByXPath("//input[@id='username_box']");
        if (!IsVisible(UsernameBox))
        {
            return Fail("Username Box isn't visible");
        }
        SetText(UsernameBox, GetSetting("User"));

        Wait(2);
		
        var PasswordBox = ElementByXPath("//input[@id='password_box']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password Box isn't visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
		
        Wait(2);

        Recaptcha_Function(); //call
		
        Wait(4);	
		
        var Button_Login = ElementByXPath("//input[@value='Log in Here']");
        if (!IsVisible(Button_Login))
        {
            return Fail("Login button not found");
        }
        Click(Button_Login);
	
        Wait(1);
		
        return base.DoLogin();
    }
//======//



    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }



//=================//
//GetFaucetWaitTime//
//=================//
    public override int GetFaucetWaitTime()
    {
        if (cs)
        {
            int s;
            try
            {
                s = Convert.ToInt32(GetSetting("TT"));
            }
            catch (Exception)
            {
                s = 60;
            }
            cs = false;
            return s*60;
        }
		
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//=================//


    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }



//=============//
//DoSolveFaucet//
//=============//
    public override int DoSolveFaucet()
    {
		
		//==========//
		//Clicks//
		//==========//
        if (GetBoolSetting("Clicks"))
        {

           Title = "Earn";
           GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_ads");
	
           Wait(2);
		   
		   var Captcha_Check = ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]");
           if (IsVisible(Captcha_Check))
		   {
             Log("Clicks - do recaptcha");
             Recaptcha_Function(); //call
           }

           Wait(6);
		
		   var CheckAll = ElementByXPath("//input[@value='View']");
           if (IsVisible(CheckAll))
		   {

             var TimeToWaitForBreak = DateTime.Now.AddSeconds(420); //420sec = 7min
             while (true)
             {
				 
               CheckForPopupsEnabled = false;	
				 
               Title = "";

		       var Captcha_2_Check = ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]");
               if (IsVisible(Captcha_2_Check))
		       {
                 Log("Clicks - do recaptcha");
                 Recaptcha_Function(); //call
               }
			   
		       var ViewButtons = ElementByXPath("//input[@value='View']");
			   if (IsVisible(ViewButtons))
		       {
               Log("Clicks - View button - start");
			   Click(ViewButtons);
			   }
			   
			   Wait(5);
		   		   
               Driver.SwitchTo().Window(Driver.WindowHandles[1]);
			   
               Log("Clicks - Wait for end AD");
			   Wait(70);

               Title = "Earn";
               Driver.SwitchTo().Window(Driver.WindowHandles[0]);

               CheckForPopupsEnabled = true; //enable
               CheckForPopups();    //call
			      
		       var Timer_Run_Check = ElementByXPath("//h2[contains(@class,'timerMessage') and contains(@style,'display:none')]") ;
               if (!IsVisible(Timer_Run_Check)) //NOT Visible
		       {
				   Log("Clicks - Time end - success");
				   ClaimSuccess(); //Marks the claim as a success
			   }
	   
               if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
               {
               Log("Clicks - break - TimeToWaitForBreak");
               break; //break the wait loop
               }
		     
		     } //end while
		 
		   } //end CheckAll
		   
           Title = "Earn";
           CheckForPopupsEnabled = true; //enable
           CheckForPopups();    //call
		   
        } //end Clicks
		//==========//		
		
		
		//==========//
		//SlideShows//
		//==========//
        if (GetBoolSetting("SlideShows"))
        {

           Title = "Earn";
           GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows");
	
           Wait(6);
		
		   var CheckAll = ElementByXPath("//input[@value='View']");
           if (IsVisible(CheckAll))
		   {

             var TimeToWaitForBreak = DateTime.Now.AddSeconds(420); //420sec = 7min
             while (true)
             {
				 
               CheckForPopupsEnabled = false;	
				 
               Title = "thetimecave.com";
			   
		       var ViewButtons = ElementByXPath("//input[@value='View']");
			   if (IsVisible(ViewButtons))
		       {
               Log("SlideShows - View button - start");
			   Click(ViewButtons);
			   }
			   
			   Wait(7);
		   		   
               Driver.SwitchTo().Window(Driver.WindowHandles[1]);
			   
               Wait(); //Wait for NEXT button
               Log("SlideShows - Wait for NEXT button");
			   
		       var Next_VAR = ElementByXPath("//a[contains(text(),'Next')]");
               if (IsVisible(Next_VAR))
		       {
                Log("SlideShows - click NEXT");
                Click(Next_VAR);
			   }
			   
               if (Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows"))	   			   
               {
               Log("SlideShows - break - end season - success");
			   ClaimSuccess(); //Marks the claim as a success
               break; //break the wait loop
               }
	   
		       var Captcha_Check = ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]");
               if (IsVisible(Captcha_Check))
		       {
                 Log("SlideShows - do recaptcha");
                 Recaptcha_Function(); //call
               }

               if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
               {
               Log("SlideShows - break - TimeToWaitForBreak");
               break; //break the wait loop
               }
		     
		     } //end while
		 
		   } //end CheckAll
		   
           Title = "Earn";
           CheckForPopupsEnabled = true; //enable
           CheckForPopups();    //call
		   
        } //end SlideShows
		//==========//		


		//==========//
		//NightFallNews//
		//==========//
        if (GetBoolSetting("NightFallNews"))
        {

           Title = "Earn";
           GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=vote");
	
           Wait(6);
		
		   var CheckAll = ElementByXPath("//input[contains(@value,'View Showshows')]");
           if (IsVisible(CheckAll))
		   {

             var TimeToWaitForBreak = DateTime.Now.AddSeconds(420); //420sec = 7min
             while (true)
             {
				 
               CheckForPopupsEnabled = false;	
				 
               Title = "nightfallnews.com";
			   
		       var ViewButtons = ElementByXPath("//input[contains(@value,'View Showshows')]");
			   if (IsVisible(ViewButtons))
		       {
               Log("NightFallNews - View button - start");
			   Click(ViewButtons);
			   }
			   
			   Wait(7);
		   		   
               Driver.SwitchTo().Window(Driver.WindowHandles[1]);
			   
               Wait(); //Wait for NEXT button
               Log("NightFallNews - Wait for NEXT button");

		       var Article_Click = ElementByXPath("//div[contains(@class,'click_checker')]//div[@class='col-md-4']");
               if (IsVisible(Article_Click))
		       {
                Log("NightFallNews - Click on Article");
                Click(Article_Click);				
			   }

		       var StartEndNewOne = ElementByXPath("//a[contains(text(),'START NEXT')]");
               if (IsVisible(StartEndNewOne))
		       {
                ClaimSuccess(); //Marks the claim as a success
                Log("NightFallNews - END - success - start new one");
                Click(StartEndNewOne);			
			   }
			   
		       var Time_check = ElementByXPath("//span[text()='10']");
               if (IsVisible(Time_check))
		       {
                Log("NightFallNews - click NEXT");
		        var Next_VAR = ElementByXPath("//button[contains(text(),'Next')]");
                Click(Next_VAR);
			   }
			   
               if (Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=vote"))	   			   
               {
               Log("NightFallNews - break - end season - succeed");
               break; //break the wait loop
               }
	   
		       var Captcha_Check = ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]");
               if (IsVisible(Captcha_Check))
		       {
                 Log("NightFallNews - do recaptcha");
                 Recaptcha_Function(); //call
               }

               if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
               {
               Log("NightFallNews - break - TimeToWaitForBreak");
               break; //break the wait loop
               }
		     
		     } //end while
		 
		   } //end CheckAll
		   
           Title = "Earn";
           CheckForPopupsEnabled = true; //enable
           CheckForPopups();    //call
		   
        } //end NightFallNews
		//==========//		


		//======//
		//Watch//
		//======//
        if (GetBoolSetting("Watch"))
        {
		    Title = "Earn";
            GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video");

            Wait(4);

            var Watch = ElementsByXPath("//input[@value='Watch']");
            int n = 0;
            while (Watch.Count > n)
            {
                CheckForPopupsEnabled = false;
                Click(Watch[n],false);
                Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                Wait(4);
                var Watch_ = ElementByXPath("//a[contains(@href,'check-watchVideo')]");
                if (IsVisible(Watch_))
                {
                    Click(Watch_);
                    Wait(5,9);
                }
                else
                {
                    n++;
                }
                CheckForPopupsEnabled = true;
                CheckForPopups();
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                Wait();

                if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video"))
                {
                    GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video");
                }
                else
                {
                    Driver.Navigate().Refresh();
                    Wait(2);
                    if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video"))
                    {
                        GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video");
                    }

                }
                Wait(4);

                Watch = ElementsByXPath("//input[@value='Watch']");
            }


        } //end Watch
		//==========//
		
		
		//==========//
		//ClaimRoll//
		//==========//
        if (GetBoolSetting("ClaimRoll"))
        {
			Title = "Earn";
            GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=free_money");

            Wait(1);
            var rollButton = ElementByXPath("//input[@id='spin']");
            if (IsVisible(rollButton))
            {
                try
                {
                    Click(rollButton);

                }
                catch (Exception)
                {
                    Log("It's probably that the roll isn't avaible at that moment");
                }
            }
            else
            {
                Log("It's probably that the roll isn't avaible at that moment");
            }
        }//end ClaimRoll
		//==========//
		
        cs = true;
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
//=============//




    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	

        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {
			
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
		  }
		  
	     //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

		return 0;
        }//end Recaptcha_Function
        //=================//	
	
	
	
	
} //end class
