
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using FaucetCollector.Captcha;
using FaucetCollector.Script;

//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha
public class AllCoinsPWScript : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings ( "https://allcoins.pw/" )
          {
          new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
          new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},

          new FaucetSetting() { Name = "UseSolveMedia", Display = "Use SolveMedia (Leave check by default)", Type = EditorType.CheckBox, Default = true},
          new FaucetSetting(){Name="Faucet",Display="Select Faucet to claim",Type=EditorType.ComboBox,Items=Faucets.Keys.ToList(),Default=Faucets.Keys.FirstOrDefault()}
          };
        }
    }
    public const string BaseUrl="https://allcoins.pw/";
    private readonly Dictionary<string,string> Faucets=new Dictionary<string, string>
    {
        {"Bitcoin","https://allcoins.pw/faucet.php?coin=BTC" },
        {"DOGE","https://allcoins.pw/faucet.php?coin=DOGE" },
        {"Litecoin","https://allcoins.pw/faucet.php?coin=LTC" },
        {"Ethereum","https://allcoins.pw/faucet.php?coin=ETH" },
        {"DASH","https://allcoins.pw/faucet.php?coin=DASH" },
        {"Monero","https://allcoins.pw/faucet.php?coin=XMR" },
        {"BitcoinCash","https://allcoins.pw/faucet.php?coin=BCH" },
        {"ZCash","https://allcoins.pw/faucet.php?coin=ZEC" },
        {"Ethereum Classic","https://allcoins.pw/faucet.php?coin=ETC" },
        {"IDA","https://allcoins.pw/faucet.php?coin=IDA" },
        {"PIVX","https://allcoins.pw/faucet.php?coin=PIVX" },
        {"DigiByte","https://allcoins.pw/faucet.php?coin=DGB" },
        {"Reddcoin","https://allcoins.pw/faucet.php?coin=RDD" },
        {"Electroneum","https://allcoins.pw/faucet.php?coin=ETN" },
        {"Bitcoin Gold","https://allcoins.pw/faucet.php?coin=BTG" },
        {"Stellar","https://allcoins.pw/faucet.php?coin=XLM" },
        {"Ripple","https://allcoins.pw/faucet.php?coin=XRP" },
        {"Tron","https://allcoins.pw/faucet.php?coin=TRX" },
        {"Bitcoin SV","https://allcoins.pw/faucet.php?coin=BSV" },
        {"BitTorrentToken","https://allcoins.pw/faucet.php?coin=BTT" }
    };

    public string Url_{ get 
        
        {
            var SelectedFaucet=GetSetting("Faucet");

            if ( Faucets.ContainsKey ( SelectedFaucet ) )
            {
                return Faucets[SelectedFaucet];
            }

            return Faucets.Values.FirstOrDefault ( );
        
        }
    }
    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//
    public override void Start()
    {
        Title = "Allcoins.pw";
        
        SuccessXPath ="//h3[contains(text(),'REWARD')]";
        FailXPath = "//div[contains(@class,'alert-warning')]";
        Url=Url_;   
        base.Start();

    }
    public override bool IsLoggedIn( )
    {
        WaitForSiteLoad( );

        return ElementByXPath("//a[contains(@onclick,\"$('#login').show()\")]")==null;
    }
    public bool IsVisibleSite( )
    {
        return ElementByXPath("//div[@id='topbar']")!=null;        
    }

    public void WaitForSiteLoad( )
    {
        DateTime Timeout=DateTime.Now.AddSeconds(20);
        while ( !IsVisibleSite( )&&DateTime.Now<Timeout )
        {
            Wait( );
        }
       
    }
    public override int DoLogin()
    {
		//go to "BTC" faucet page
        GoToUrl(BaseUrl);

        WaitForSiteLoad( );

        Wait(3 , 4);

        ExecuteScript("$('#register').hide()");

        Wait(1);

        var loginPanelBtn = ElementByXPath("//a[contains(@onclick,\"$('#login').show()\")]");
        //

        if ( IsVisible(loginPanelBtn)  && !IsVisible(ElementByXPath("//input[@id='log_email']")) && !IsVisible(ElementByXPath("//a[contains(@onclick,\"$('#register').hide() && $('#login').show()\")]")))
        {
            Click(loginPanelBtn);
        }
        else
        {
            var GotoLogin=ElementByXPath("//a[contains(@onclick,\"$('#register').hide() && $('#login').show()\")]");
            if ( IsVisible(GotoLogin) )
            {
                Click(GotoLogin);
            }
        }
        Wait(2);


        var UserBox=ElementByXPath("//input[@id='log_email']");
        if ( !IsVisible(UserBox) )
        {
            return Fail("User box not visible");
        }
        SetText(UserBox , GetSetting("User"));

        var PassBox=ElementByXPath("//input[@id='log_pass']");
        if ( !IsVisible(PassBox) )
        {
            return Fail("Password box is not visible");
        }
        SetText(PassBox , GetPassword("Pass"));


        var captchaBtn=ElementByXPath("//div[@id='log_captcha']//button[@class='w3-button w3-block w3-green w3-section w3-padding'][contains(text(),'Click here if you are human')]");
        if ( !IsVisible(captchaBtn) )
        {
            return Fail("Login btn not visible");
        }

        Click(captchaBtn);


        Wait(2,3);

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }

        var loginBtn=ElementByXPath("//button[@id='login_btn']");
        if ( !IsVisible(loginBtn) )
        {
            return Fail("loginBtn is not visible or not found");
        }

        Click(loginBtn);
        Wait(2);


        var ErrorLogin=ElementByXPath("//div[@class='w3-pale-red w3-padding-small w3-round']");
        if ( IsVisible(ErrorLogin) )
        {
            return Fail(ErrorLogin.Text);
        }

            return base.DoLogin();

    }


    public override int BeforeSolveCaptcha()
    {
	    //select the right option for captcha
        var solveMediaCaptchaDiv = ElementByXPath("//*[@id='captcha1']");
        var reCaptchaDiv = ElementByXPath("//*[@id='captcha2']");
		var switchCaptchaBtn = ElementByXPath("//a[contains(@onclick, 'swc()')]");

        if (GetBoolSetting("UseSolveMedia"))
        {
            if(reCaptchaDiv != null && IsVisible(reCaptchaDiv))
			{
				if(switchCaptchaBtn != null && IsVisible(switchCaptchaBtn))
				{
					Click(switchCaptchaBtn);
				}
				else
				{
					Fail("Switch not found");
				}
			}
        }
        else
        {
            if(solveMediaCaptchaDiv != null && IsVisible(solveMediaCaptchaDiv))
			{
				if(switchCaptchaBtn != null && IsVisible(switchCaptchaBtn))
				{
					Click(switchCaptchaBtn);
				}
				else
				{
					Fail("Switch not found");
				}
			}
		}

        Wait(1);

        return base.BeforeSolveCaptcha();
    }


    //================================//
    //end BeforeSolveCaptcha
    //================================//


    private void CheckAntiBot( )
    {

        var AntiBotButton = ElementByXPath("//a[contains(@text,'I AM NOT A BOT')]",0);
        if ( IsVisible(AntiBotButton) )
        {
            Click(AntiBotButton);
            Wait(4);
        }

    }
      
        

    public override int DoSolveCaptcha()
	{
        var result = base.DoSolveCaptcha( );

        if ( result>0 )
        {
            return result;
        }

        RecaptchaUtility utility = new RecaptchaUtility(this);
        utility.DoSolve( );


        return result;
	}
	

	
	
//================================//
//start DoSolveFaucet
//================================//
public override int DoSolveFaucet()
{
        string Url_=this.Url_;

        if ( Driver.Url!=Url_ )
        {
            GoToUrl ( Url_ );
        }

       
        Wait ( 2 ); 
        CheckAntiBot ( );


    
        var startClaimBtn = ElementsByXPath("//span[contains(@data-href,'./faucet.php?coin')]")
            .FirstOrDefault(button=>IsVisible(button));
        if ( IsVisible ( startClaimBtn ) )
        {
            Click ( startClaimBtn );
        }

        CheckAntiBot ( );

        DateTime timeout=DateTime.Now.AddSeconds(20);
        while(!IsVisible(ElementByXPath("//button[contains(text(),'Captcha is resolved')]")) && DateTime.Now<timeout )
        {
            Wait( 1);

        }


        var result = SolveCaptcha();
        if ( result>0 )
        {

            return result;
        }

       CheckAntiBot ( );


        Wait ( 1 );

        var captchaResolvedBtn=ElementByXPath ("//button[contains(text(),'Captcha is resolved')]");
        if ( !IsVisible(captchaResolvedBtn) )
        {
            return Fail("captchaResolved btn not found");
        }
        Click ( captchaResolvedBtn );


        Wait(1);

        var addToMyBalance=ElementByXPath("//a[@href='?add']");
        if ( IsVisible(addToMyBalance) )
        {
            Click(addToMyBalance);
            Wait(2);
        }

        CheckAntiBot ( );

        return base.DoSolveFaucet();
}

    public override int GetFaucetWaitTime ( )
    {
        string Url_=this.Url_;

        if ( Driver.Url!=Url_ )
        {
            GoToUrl ( Url_ );
        }
        Wait ( 2 );
        var Timer=ElementsByXPath("//span[@id='cntds']").FirstOrDefault(x=>IsVisible(x));
        if ( Timer!=null )
        {
            var SplitedText=Timer.Text.Split ( ':' );
            int m,s;
            if(int.TryParse(SplitedText[0],out m) && int.TryParse(SplitedText[1], out s) )
            {

                return m*60+s;

            }
        }
        return base.GetFaucetWaitTime ( );
    }



}
