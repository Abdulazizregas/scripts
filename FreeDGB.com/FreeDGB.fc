using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FaucetCollector.Script;
using OpenQA.Selenium;

class FreeDgbScript : FaucetScript
{


    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://freedgb.com")
            {
                new FaucetSetting(){
                    Name="User",
                    Display ="ExpressCrypto Unique Id",
                    Type =EditorType.TextBox,
                    Required =true
                },
            
              //new FaucetSetting
              //{
              //    Name="UseSolvemedia",
              //    Type=EditorType.CheckBox,
              //    Default=true,
              //    Display="UseSolvemedia"
              //}
            };
        }
    }

    public override void Start()
    {

        Title = "FreeDGB";


        SuccessXPath ="//div[@class='alert alert-success fade show']";
        FailXPath ="//div[@class='alert alert-danger fade show']";

        base.Start();
    }


    public override int DoInit()
    {

        return base.DoInit();
    }


    public override bool IsLoggedIn()
    {
        // See if the element is visible;
        return ElementByXPath("//div[@id='captchaModal']") !=null;
    }


    public override int BeforeLogin()
    {

        return base.BeforeLogin();
    }


    public override int DoLogin()
    {
        var UserBox = ElementByXPath("//input[@id='address']");
        if (!IsVisible(UserBox))
        {
            return Fail("UserBox not found");
        }
        SetText(UserBox, GetSetting("User"));

        var ButtonLogin = ElementByXPath("//button[@class='btn btn-block btn-primary my-2']");
        if (!IsVisible(ButtonLogin))
        {
            return Fail("Button login not visible");

        }
        Click(ButtonLogin);

        Wait();
        var ErrorElement = ElementByXPath("//div[@class='alert alert-danger']");
        if (IsVisible(ErrorElement))
        {
            Log(ErrorElement.Text);
            if (ErrorElement.Text.ToLower().Contains("invalid username") || ErrorElement.Text.ToLower().Contains("invalid Password"))
            {
                Disable();
                return Fail("You need to put correct credentials ");
            }
        }

        return base.DoLogin();
    }


    public override int AfterLogin()
    {

        return base.AfterLogin();
    }

    private string GetTextWithJavascript(IWebElement element)
    {
        if ( element==null )
        {
            return string.Empty;
        }

        return ExecuteScript("return arguments[0].textContent.trim();" , element).ToString();

    }
    public override int GetFaucetWaitTime()
    {

        var timeElement=ElementByXPath("//div[@class='alert alert-danger fade show']");

        if (  IsVisible(timeElement) )
        {
            // we need to get the text with javacscript since .text of IWebElement is not working
            string timeText=GetTextWithJavascript(timeElement);

            if ( !string.IsNullOrEmpty(timeText) && timeText.Contains("You have to wait"))
            {
                var splitedTimetext=timeText.Split(' ');
                int minutes;
                if ( splitedTimetext.Length>=5 && int.TryParse(splitedTimetext[4],out minutes)  )
                {
                    return minutes*60;
                }

            }

        }
        Log("Timer is not visible, Trying to claim");

        return base.GetFaucetWaitTime();
    }


    public override int BeforeSolveCaptcha()
    {

        return base.BeforeSolveCaptcha();
    }

    public override int DoSolveCaptcha()
    {

        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {

        return base.AfterSolveCaptcha();
    }


    public override int BeforeSolveFaucet()
    {
        

        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveFaucet()
    {
        var ButtonSubmitCaptcha = ElementByXPath("//input[@value='Verify Captcha']");
        if (IsVisible(ButtonSubmitCaptcha))
        {
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Error solving captcha");
            }

            Click(ButtonSubmitCaptcha);
            Wait();

        }
        else {

            return Fail("Button submit captcha not found ... , maybe there is already a claim");

        }
        
       
        return DoSolveFaucet();
    }


    public override int AfterSolveFaucet()
    {
        return base.AfterSolveFaucet();
    }


    public override int CheckFaucetResult()
    {
        Reload = true;
        return base.CheckFaucetResult();
    }

}