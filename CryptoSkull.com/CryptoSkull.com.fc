//==================//
//script Written by: ••AviramDayan•• 19/10/2020 20:00PM - Version 1
//Last Update: 19/10/2020 21:20PM - Version 1
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using System.Text.RegularExpressions;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Drawing;
using System.Threading.Tasks;
using System.Collections.Generic;

//css_inc ShortLinkUtilities
//css_ref FaucetCollector.Utilities
//css_inc RecaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha


public class CryptoSkull : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://cryptoskull.com/")
            {
				
				//form menu
				new FaucetSetting(){Name="Menu_Facebook_Or_Normal_Login",Display="Select favorite Login",Type=EditorType.ComboBox,Default="Normal Login",Items=new System.Collections.Generic.List<string>{"Normal Login","Facebook Login"}},

                new FaucetSetting(){Name="Email",Display="Normal Login - Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Normal Login - Password",Type=EditorType.Password,Required=true},
				
                new FaucetSetting(){Name="FacebookEmail",Display="Facebook Login - Email ",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="FacebookPassword",Display="Facebook Login - Password",Type=EditorType.Password,Required=true},

                new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "AutoGame", Display = "Auto Game - Medium - play on Medium level", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting(){Name="SatoshiAmount",Display="set Satoshi Amount (Recommended - 0.00000100)",Default="0.00000100",Type=EditorType.TextBox,Required=true},
	
            };
        }
    }
	

	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "cryptoskull.com";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
		SuccessXPath = "//p[@class='slideIn' and contains(text(),'Successfully added')]"; //*[text()='']
        FailXPath = "//p[@class='slideIn' and contains(text(),'Your balance must be less than')]"; //*[text()='']

        TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	

	//loop
	bool ad;


	
	
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
	
    public override int DoInit()
    {

        ad = false;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
		
		
     if (!Driver.Url.Contains("https://cryptoskull.com/"))
     {
     GoToUrl("https://cryptoskull.com/");
	 }
	 
     //save Login Cookies - Normal- LOGOUT
     return ElementByXPath("//button[@class='logoutButton']") != null;  		
		
		
     if (!Driver.Url.Contains("https://www.facebook.com/"))
     {
     GoToUrl("https://www.facebook.com/");
     }
	 	
	 //save Login Cookies - Facebook LOGOUT
	 return ElementByXPath("//div[@class='_cy6']") != null;  //facebook main menu	

    }
//==================//
//save Login Cookies 
//==================//	


	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

	

//================================//
//start DoLogin
//================================//
 public override int DoLogin()
 {

	 //general - var checks login or exit
     var ExitButton_Normal = ElementByXPath("//button[@class='logoutButton']"); //LOGOUT 
     var ExitButton_Facebook = ElementByXPath("//div[@class='_cy6']"); //facebook main menu	

     var MenuVar = GetSetting("Menu_Facebook_Or_Normal_Login");  
	 
	 //=========//
	 //Facebook//
	 //========//	 
     if(MenuVar=="Facebook Login")
     {

	    if (!IsVisible(ExitButton_Facebook))
	    {
			
          GoToUrl("https://cryptoskull.com/");
		      
          Wait(2);
		  	
		  
		  //click on LoginViaFacebook
		  //var LoginViaFacebook =ElementByXPath("//button[text()='Log in via Facebook']"); 
		  //var url =LoginViaFacebook.GetAttribute("src");
          //GoToUrl(url);
		
		
		  GoToUrl("https://www.facebook.com/");
		  Title = Driver.Title;
		  
          Wait(2);
		  
          //set email
          var signInEmail = ElementByXPath("//input[@id='email']");
          SetText(signInEmail, GetSetting("FacebookEmail"));
		  Log("LoginFacebook: set Email");
		  
          Wait(2);
		  
          //set pass
          var signInPassword = ElementByXPath("//input[@id='pass']");
          SetText(signInPassword, GetPassword("FacebookPassword"));
		  Log("LoginFacebook: set Pass");
		  
          Wait(2);
	
          //Click login button
          var LoginButtonFacebook = ElementByXPath("//*[@id='loginbutton']"); //button[text()='Log in']
          Click(LoginButtonFacebook);
		  Log("LoginFacebook: Click Button");	
		  
          Wait(2);
		  
          GoToUrl("https://cryptoskull.com/");
		  Title = "cryptoskull.com";
		  
          Wait(2);
		  
		  //click on login Main start
          var LoginStart2 =ElementByXPath("//button[text()='LOG IN']"); //LOG IN
		  Click(LoginStart2);
		  
          Wait(2);
		  
		  //click on LoginViaFacebook
		  var LoginViaFacebook =ElementByXPath("//button[text()='Log in via Facebook']"); 
		  Click(LoginViaFacebook);

        } //end ExitButton
	    
     } //end Facebook Login
	

	 //=========//
	 //Normal//
	 //========//

     if(MenuVar=="Normal Login")
     {

	    if (!IsVisible(ExitButton_Normal))
	    {
		    
		  //click on login Main start
          var LoginStart = ElementByXPath("//button[@class='loginButton']"); 
		  Click(LoginStart);
		  		  
          //set email
          var signInEmail = ElementByXPath("//input[@placeholder='Email']");
          SetText(signInEmail, GetSetting("Email"));
		  Log("Login: set Email");
		  
          Wait(2);
		  
          //set pass
          var signInPassword = ElementByXPath("//input[@placeholder='Password']");
          SetText(signInPassword, GetPassword("Password"));
		  Log("Login: set Pass");
		  
          Wait(2);
		

          //Click login button
          var loginButton = ElementByXPath("//button[@name='signin']"); //button[text()='Log in']
          Click(loginButton);
		  Log("Login: Click Button");	  
		  
          Wait(3);
		  
	      invisible_Recaptcha_Function(); //call 
          ExecuteScript("login();");


        } //end ExitButton
	    
     } //end Facebook Login
	
		

	
        //Let Faucet Collector continue
        return base.DoLogin();
 }
//================================//
//end DoLogin
//================================//
 

	
	
//================================//
//start AfterLogin
//================================//
 public override int AfterLogin()
 {
	 

    //we are good to continue
    return base.AfterLogin();

 }
	
//================================//
//end AfterLogin
//================================//
	

	
	
    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (ad)
        {
            
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();

    }

	
	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {

		
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }
	
	
	
	
	
    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	
	
    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
	

	
	
//================================//
//start BeforeSolveFaucet
//================================//

 public override int BeforeSolveFaucet()
 {
	 	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
 }
  
//================================//
//end BeforeSolveFaucet
//================================//
	

	
	
	
//================================//
//start DoSolveFaucet
//================================//
 public override int DoSolveFaucet()
 {

  //======//
  //AutoGame
  //=======//
	
  //if the AutoGame on
  if (GetBoolSetting("AutoGame"))
  {  
     //go to Auto game
	 Log("AutoGame: go to home page");        
	 GoToUrl("https://cryptoskull.com/");
     
	 var BalanceVAR = ElementByXPath("//span[@id='balance']");
     string BalanceSTRING = BalanceVAR.Text.Trim().Split('.')[1];
     int BalanceINT = Convert.ToInt32(BalanceSTRING);

     if (IsVisible(BalanceVAR) && BalanceINT < 100) // under 100
     {
	    Log("AutoGame: not good - you have balance under < 100 ");   
	 }
	 
     if (IsVisible(BalanceVAR) && BalanceINT > 100) // above 100
     {
	    Log("AutoGame: good - you have balance and above > 100 ");        

        Wait(2);
	 	
	 	//to refresh page
        var HomeLogoWebsite = ElementByXPath("//a[@href='/']");
	 	Log("FaucetClaim: click on HomeLogoWebsite - to refresh page");   	
	    Click(HomeLogoWebsite); 
	 	
        Wait(2);
	 
        //click on menu balance
        var DropDownMenuBalance = ElementByXPath("//*[@id='curBox']/div"); 
	    Click(DropDownMenuBalance);		
	 	Log("AutoGame: Click on - DropDownMenuBalance");
	 	
        Wait(2);
	   
        //switch & select "BTC"
        var SelectBTC = ElementByXPath("//*[@id='curBox']/ul/li[3]"); 
	    Click(SelectBTC);		
	 	Log("AutoGame: Click on - SelectBTC");
	 	
        Wait(2);
	 	
        //Click on Medium Tab
        var MediumLevelTab = ElementByXPath("//span[text()='MEDIUM']"); 
	 	Log("AutoGame: Click on - Medium Level Tab");
        Click(MediumLevelTab);		
	 
        Wait(2);
	 	
        //set SatoshiAmount
        var SatoshiAmountVar = ElementByXPath("//input[@id='amount']");
	 	Log("AutoGame: set Satoshi Amount");
        SetText(SatoshiAmountVar,GetSetting("SatoshiAmount"));	 
	 
	 	//====================================================//		
 	    //General vars - start/end Buttons & RowLeft/Right Buttons 
	 	//====================================================//
	 
        var RowCurrent = ElementByXPath("//div[@class='row current']"); 		
	 	
        var PlayButtonMain = ElementByXPath("//button[@class='playButton']"); 
	 	
        var startButton = ElementByXPath("//button[text()='START']"); //button[@id='startButton']
        var endButton = ElementByXPath("//button[text()='END']"); //button[@id='endButton']	
	 	
        var RowLeftButton = ElementByXPath("//*[@id='steps']/div[10]/div[1]"); 		
        var RowRightButton = ElementByXPath("//*[@id='steps']/div[10]/div[2]");
	 	
	 	var BombYouLose = ElementByXPath("//button[@id='result bomb-icon']");	
	 	var WinKey = ElementByXPath("//button[@id='result key-icon']");	
	 	
	 	var TakeProfit = ElementByXPath("//button[text()='TAKE Ƀ0.00000194']"); //endButton
	  
	 	//part 1
	 	//Start loop game - RowLeft 1
	 
	 	if (IsVisible(RowCurrent))
        {		
	    Log("AutoGame: RowCurrent NOT visible");
        Click(endButton);
	 	}
	 
	 	
        //if "startButton" visible - Click
	 	if (IsVisible(startButton) && !IsVisible(RowCurrent))
        {
	 		
           Wait(3);
	 	   Log("AutoGame: RowCurrent visible startButton");
           Click(startButton);	 	   
		   
           Wait(3);
	 	   
           //Click on first Row - RowLeftButton
	 	   Log("AutoGame: Click on first Row - RowLeftButton");
           Click(RowLeftButton);	
	 	   
           Wait(2);	 	   
	 	   
	 	   if (IsVisible(WinKey) & IsVisible(RowCurrent))	
           {	
	 	   Click(endButton);	//TakeProfit
           }
	 	   
	 	   if (IsVisible(BombYouLose) & IsVisible(RowCurrent))
           {	
	 	   //Click(startButton);  //no need to do anything
           }
	 	   		   
	       //if text Message balance apper
           var MessageNoBalance = ElementByXPath("//p[text()='You don't have enough money in your balance']"); 
	 	   if (IsVisible(MessageNoBalance))
           {		
	       Log("AutoGame: RowCurrent NOT visible");
	 	   return 27 * 60; //after we return after 27 min
	 	   } 
	 	
        } //end RowCurrent
	 
	 	
	 } //end BalanceINT > 100
   } //end AutoGame
   //=============================//


  //======//
  //FaucetClaim
  //=======//
    if (GetBoolSetting("FaucetClaim"))
    {  

		GoToUrl("https://cryptoskull.com/");
		Log("FaucetClaim - go to home page");        
		
        Wait(3);

        var BalanceVAR = ElementByXPath("//span[@id='balance']");
        string BalanceSTRING = BalanceVAR.Text.Trim().Split('.')[1];
        int BalanceINT = Convert.ToInt32(BalanceSTRING);

        if (IsVisible(BalanceVAR) && BalanceINT < 600) // under 600
        {
            Log("LimitFaucet - the balance under 600 < good");
			Faucet_Function(); //call
        }

        if (IsVisible(BalanceVAR) && BalanceINT > 600) // above 600
        {
            Log("LimitFaucet - the balance above 600 > not good");
        }

    } //end FaucetClaim

   //=========================//
	 
  return Time_Function(); //call 
  
  //We are good to continue
  return base.DoSolveFaucet();
 }
 
//================================//
//end DoSolveFaucet
//================================//
	
	
	
	
	
	
	
//===============//
//AfterSolveFaucet
//===============//

 public override int AfterSolveFaucet()
 {
	

        //Let Faucet Collector continue
        return base.AfterSolveFaucet();
 }
//===============//
//AfterSolveFaucet
//===============//


	
	


    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
 


        //=================//
        //Faucet_Function
        //=================//
        public int Faucet_Function()
        {

           var OpenFaucetButton = ElementByXPath("//div[@class='row']//button[@name='faucet']"); 
           Click(OpenFaucetButton);		
		   Log("FaucetClaim: Click on Open Faucet Button");
		   
           Wait(5);
		   
           var FaucetTimeVAR = ElementByXPath("//button[contains(@class,'card-button blocked') and @id='claimFaucet']");
           var FaucetRemaining = ElementByXPath("//span[contains(@id,'faucetRemaining') and text()='0']");
		   
		   if (IsVisible(FaucetTimeVAR)) //if the timer Visible - return to site Time
	       {
	         Log("return to site time"); 
             return Time_Function(); //call
		   }
		   
		   
		   if (!IsVisible(FaucetTimeVAR)) //if the timer NOT Visible - do stuff
	       {
		   				
		      if (!IsVisible(FaucetRemaining)) //if NOT Remaining 0 - do stuff
	          {
		   	   
	             var FaucetClaim = ElementByXPath("//button[@id='claimFaucet']");
		         Click(FaucetClaim);
		         Log("FaucetClaim - click");	
		   	  
		   	     Wait(2);
		   	   
		   	     invisible_Recaptcha_Function(); //call 
                 ExecuteScript("claimFaucet();");
		   	  
	             var MessageSuccess_Check = ElementByXPath("//p[@class='slideIn' and contains(text(),'Successfully added')]");
		         if (IsVisible(MessageSuccess_Check))
	             {
                 var MessageSuccess = ElementByXPath("//p[@class='slideIn']");
		         Log(MessageSuccess.Text);	
                 ClaimSuccess(); //Marks the claim as a success
		   	  }
		   			
              } //end if NOT Remaining 0
		      
		      
           } //end FaucetTimeVAR NOT Visible

           return 0;		
        }//end Faucet_Function
        //=================//	
		


        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {
			
           var MinVar = ElementByXPath("//button[contains(@class,'card-button blocked') and @id='claimFaucet']");

           if (IsVisible(MinVar))
           {
	         Log("Time_Function - WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Split(':')[0])*60;
             sec = Convert.ToInt32(MinVar.Text.Trim().Split(':')[1]);
             return min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("Time_Function - return to your time"); 
		        return GetWaitSetting();
           }

           return 0;		
        }//end Time_Function
        //=================//	
		

        //=================//
       //invisible_Recaptcha_Function
        //=================//
        public int invisible_Recaptcha_Function()
        {
			
          var RecaptchaOpen_Iframe = ElementByXPath ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]");  
          if (RecaptchaOpen_Iframe !=null)          
		  {
            //SolveCaptcha if apper
            Log("DO invisible_Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
		    RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		    
            Wait();
			
            //ExecuteScript("callback_Name();");

		  }
		  
		return 0;
        }//end invisible_Recaptcha_Function
        //=================//	

 
} //end public class 
