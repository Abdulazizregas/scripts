using System;
using System.Collections.Generic;
using System.Linq;
using FaucetCollector.Script;
//css_ref FaucetCollector.Utilities
class AutoFaucetManualClaim : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings(BaseUrl)
            {
                new FaucetSetting(){Name="User",Type=EditorType.TextBox,Display="Username",Required=true},
                new FaucetSetting(){Name="Pass",Type=EditorType.Password,Display="Password",Required=true},
                new FaucetSetting(){Name="UseSolvemedia",Type=EditorType.CheckBox,Display="UseSolvemedia",Default=true},
                new FaucetSetting(){Name="Coin",Type=EditorType.ComboBox,Display="Coin",Default=Coins.FirstOrDefault(),Items=Coins},
                new FaucetSetting(){Name="ConvertC",Type=EditorType.CheckBox,Display="Convert Coins",Default=true }
            };



        }

    }
    public const string BaseUrl="https://autofaucet.org/";
    public const string LoginUrl=BaseUrl+"auth/signin";
    public  const string ShortUrl=BaseUrl+"dashboard/shortlinks/visit/";
    public const string AutoClaimUrl=BaseUrl+"dashboard/claim/auto";

    public override void Start( )
    {
        SuccessXPath="//div[@class='alert alert-success']";
        FailXPath="//div[@class='alert alert-danger']";

        Title="AutoFaucet";
        base.Start( );
    }
    public List<string> Coins=new List<string>
    {
        "BTC",
        "ETH",
        "XMR",
        "LTC",
        "DOGE",
        "BCH",
        "ZEC",
        "DGB",
        "DASH",
        "PPC",
        "POT",
        "TRX",
        "XRP",
        "NEO",
        "BCN",
        "STRAT"
    };
    public const string ConvertCoinsUrl=BaseUrl+"dashboard/claim/manual";
    public const string FaucetUrl=BaseUrl+"dashboard/shortlinks";
    public override int DoLogin( )
    {
        GoToUrl(LoginUrl);
        Wait(2);

        var Userbox=ElementByXPath("//form[@id='form-signin']");
        if ( !IsVisible(Userbox) )
        {
            return Fail("User box is not visible");
        }
        SetText(Userbox , GetSetting("User"));

        var PasswordBox=ElementByXPath("//input[@id='l-form-password']");
        if ( !IsVisible(PasswordBox) )
        {
            return Fail("Password box is not visible");
        }

        SetText(PasswordBox , GetPassword("Pass"));

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }

        var ButtonLogin=ElementByXPath("//button[@id='submit']");
        if ( !IsVisible(ButtonLogin) )
        {

            return Fail("Button login is not visible");

        }

        Click(ButtonLogin);
        var Error=ElementByXPath("//div[@class='toast-message']");
        if ( IsVisible(Error) )
        {
            Log(Error.Text);
        }

        return base.DoLogin( );
    }
    private int Balance
    {
        get
        {
            var Balancevar=ElementByXPath("//span[@id='acpro']");
            if ( IsVisible(Balancevar) )
            {
                var BalanceText=ExecuteScript("return document.getElementById('acpro').textContent;").ToString();
                int bal;
                if ( int.TryParse(BalanceText , out bal) )
                {
                    return bal;
                }

            }
            return 0;
        }
    }
    public override int DoSolveCaptcha( )
    {
        var Selectcaptcha=ElementByXPath("//select[@id='captcha-select']");
        if ( IsVisible(Selectcaptcha) )
        {
            if ( GetBoolSetting("UseSolvemedia") )
            {
                SelectOptionByValue(Selectcaptcha , "solvemedia");
            }
            else
            {
                SelectOptionByValue(Selectcaptcha , "recaptcha");
            }
            Wait( );
        }

        return base.DoSolveCaptcha( );
    }
    public override bool IsLoggedIn( )
    {


        return ElementByXPath("//a[@href='/auth/logout']")!=null;
    }

    public override int DoSolveFaucet( )
    {
        GoToUrl(FaucetUrl);

        Wait( );

        var ShortlinksLeft=ElementsByXPath("//button[contains(@class,'visit-button')]").Where(x=>IsVisible(x)).ToList();
        if ( ShortlinksLeft.Count>0 )
        {
            int NShort=Random ( 0 , ShortlinksLeft.Count );




            Wait( );

            try
            {
                CheckForPopupsEnabled=false;
                Click(ShortlinksLeft[NShort] , false);
                Wait(1);
                Driver.SwitchTo( ).Window(Driver.WindowHandles[0]);
                Driver.Close( );

            }
            finally
            {
                Driver.SwitchTo( ).Window(Driver.WindowHandles[0]);
                CheckForPopupsEnabled=true;
            }
            FaucetCollector.Utilities.ShortLinkBypasser bypasser=new FaucetCollector.Utilities.ShortLinkBypasser(this);
            bool Succ=bypasser.DoShortLink();
            if ( Succ )
            {
                CheckFaucetResult( );

            }




        }

        if ( GetBoolSetting("ConvertC") )
        {

            GoToUrl(ConvertCoinsUrl);

            if ( Balance>60 )
            {
                var CurrencySelect=ElementByXPath("//select[@id='currency-select']");
                if ( IsVisible(CurrencySelect) )
                {
                    SelectOptionByValue(CurrencySelect , GetSetting("Coin"));

                }

                var TokenAmount=ElementByXPath("//input[@id='token-amount']");
                if ( IsVisible(TokenAmount) )
                {
                    SetText(TokenAmount , Balance.ToString( ));
                }

                DoSolveCaptcha( );

                Wait( );
                var ButtonClaim=ElementByXPath("//button[@class='btn btn-primary']");
                if ( IsVisible(ButtonClaim) )
                {
                    Click(ButtonClaim);
                }
                var SuccOrError=ElementByXPath("//div[@class='toast-message']");
                if ( IsVisible(SuccOrError) )
                {
                    Log(SuccOrError.Text);
                }
            }

        }

        if ( GetBoolSetting("ConvertCA") )
        {
            GoToUrl(AutoClaimUrl);
            Wait(2);

            var InputCoin=ElementByXPath("//input[@value='"+GetSetting("Coin")+"']");
            if ( IsVisible(InputCoin) )
            {
                Click(InputCoin);
            }

            var Credit=ElementByXPath("//label[contains(text(),'Credit')]");
            if ( IsVisible(Credit) )
            {
                Click(Credit);
                Wait( );
            }

            var minutes=ElementByXPath("//label[contains(text(),'2 minutes')");
            if ( IsVisible(minutes) )
            {
                Click(minutes);
            }

            var BostSelect=ElementByXPath("//label[contains(text(),'4x')]");
            if ( IsVisible(BostSelect) )
            {
                Click(BostSelect);
            }
            var ClaimBtn=ElementByXPath("//button[@class='btn btn-primary']");
            if ( IsVisible(ClaimBtn) )
            {
                Click(ClaimBtn);
                Wait( );
            }
            var Timeout=DateTime.Now.AddMinutes(4);
            while ( IsVisible(ElementByXPath("//span[@class='time-left']"))&&DateTime.Now<Timeout )
            {
                Wait( );
            }

            var msg=ElementByXPath("//p[@class='message']");
            if ( IsVisible(msg) )
            {
                Log(msg.Text);
            }
        }
        return GetWaitSetting( );
    }
}

