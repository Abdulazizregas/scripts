using FaucetCollector.Script;

using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

using System;

public class BtcSpinner : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://btcspinner.io/faucet")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Spin",Display="Spin For(minutes) 0 disabled", Type=EditorType.Numeric,Default=1 }                
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "BTCspinner.io";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='alert alert-success']";
        FailXPath = "//div[@class='alert alert-danger']";

        //Let Faucet Collector start up everything
        base.Start();
    }


    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(@href,'logout')]") != null;
    }


    private bool GotoiFimNot(string url)
    {
        if (!Driver.Url.Contains(url))
        {
            GoToUrl(url);
            return true;
        }
        return false;
    }
    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        // GO TO URL IF IM NOT HERE
        GotoiFimNot("https://btcspinner.io/login");
        // INPUT USER
        RetryLogin();

        if (IsVisible(ElementByXPath("//strong[contains(text(),'Please solve the captcha') ]"))
            || IsVisible(ElementByXPath("//input[@id='email']")))
        {
            RetryLogin();
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    private void DismissModal()
    {
        var closeModalBtn = ElementByXPath("//button[contains(text(),'Later')]");
        if (IsVisible(closeModalBtn))
        {
            Click(closeModalBtn);
        }
    }
    private int RetryLogin()
    {
        var User_Box = ElementByXPath("//input[@id='email']");
        if (!IsVisible(User_Box))
        {
            return Fail("User box no visible");
        }
        SetText(User_Box, GetSetting("User"));
        Wait();
        var Pass_Box = ElementByXPath("//input[@id='password']");
        if (!IsVisible(Pass_Box))
        {
            return Fail("Fail, Pass Box not visible");
        }
        SetText(Pass_Box, GetPassword("Pass"));
        var button = ElementByXPath("//button[@data-action='login']");
        if (!IsVisible(button))
        {
            return Fail("Button Is not visible");
        }

        if (IsVisible(ElementByXPath("//div[@class='h-captcha']")))
        {
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                return result;
            }

            Wait();
        }

        Click(button);
        Wait();

        return 0;
    }

    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GotoiFimNot("https://btcspinner.io/faucet");

        var timeout = ElementByXPath("//div[@id='timeout']");
        if (IsVisible(timeout))
        {
            try
            {
                int m = 30, s = 0;

                var splitedTimer = timeout.Text.Split(':');



                int.TryParse(splitedTimer[1], out s);
                int.TryParse(splitedTimer[0], out m);


                int time = m * 60 + s;
                return time;
            }
            catch (Exception)
            {
                return 3600;
            }
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }


    public override int BeforeSolveFaucet()

    {
        DismissModal();
        Wait(1);
        int spinTime = GetIntSetting("Spin");
        if (spinTime > 0)
        {
            GotoiFimNot("https://btcspinner.io/game");
            Wait(4, 5);
            try
            {
                var spinner = ElementByXPath("//div[@class='spinner']");
                DateTime spinTimeout = DateTime.Now.AddMinutes(spinTime);
                Actions actionBuilder = new Actions(Driver).MoveToElement(spinner)
                    .ClickAndHold()
                    .MoveByOffset(0, 300).Release();

                while (IsVisible(spinner) && DateTime.Now < spinTimeout)
                {
                    actionBuilder.Build().Perform();
                    Wait(4, 5);

                }
            }
            catch (WebDriverException)
            {
                Log("There is a problem playing the game, by "
                    + spinTime.ToString() +
                    "Minutes, try disable adblock and try again",Level.Warning);
            }
        }


        return base.BeforeSolveFaucet();
    }
    public override int DoSolveFaucet()
    {
        GotoiFimNot("https://btcspinner.io/faucet");
        // GET CODE TO CLAIM FAUCET

        DismissModal();
        Wait(1);
        var captchaSolvedBtn = ElementByXPath("//button[@type='submit']");
        if (!IsVisible(captchaSolvedBtn))
        {
            return Fail("captcha solved btn is not visible");
        }

        if (IsVisible(ElementByXPath("//div[@class='h-captcha']")))
        {
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                return result;
            }

            Wait();
        }

        Click(captchaSolvedBtn);
        Wait(2, 3);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }


}
