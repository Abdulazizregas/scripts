
//==================//
//script Written by: ••AviramDayan•• 26/05/2019 04:00PM
//Last Update: 01/09/2020 17:40PM - Version 11
//==================//

using System;
using System.Drawing;
using FaucetCollector.Script;
using System.Threading.Tasks;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

//css_inc recaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha

public class primedice : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the mdogeods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://primedice.com/")
            {
                new FaucetSetting(){Name="Email",Display="Email OR UserName",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
				
                new FaucetSetting() { Name = "Reload", Display = "Reload - ON/OFF - claim unlimited time if available", Type = EditorType.CheckBox, Default =true},	
                new FaucetSetting(){Name="RakeBack",Display="RakeBack - ON/OFF - from Bronze level",Type=EditorType.CheckBox,Default=false},

				new FaucetSetting(){Name="MenuCoins",Display="MenuCoins - Select Favorite Coins",Type=EditorType.ComboBox,Default="btc",Items=new System.Collections.Generic.List<string>{"btc","eth","ltc","doge","bch","xrp","trx","eos"}},

                new FaucetSetting() { Name = "Vault_Withdraw", Display = "Vault_Withdraw - ON/OFF", Type = EditorType.CheckBox, Default =false},	
                new FaucetSetting() { Name = "Vault_Deposit", Display = "Vault_Deposit - ON/OFF", Type = EditorType.CheckBox, Default =false},	

                new FaucetSetting() { Name = "Vault_Amount_Withdraw", Display = "Vault_Amount_Withdraw", Type = EditorType.TextBox, Default = 0.00010000 },
                new FaucetSetting() { Name = "Vault_Amount_Deposit", Display = "Vault_Amount_Deposit", Type = EditorType.TextBox, Default = 0.00010000 },

                new FaucetSetting() { Name = "AffWithdraw", Display = "AffWithdraw", Type = EditorType.CheckBox, Default = false},	


            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "primedice.com";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
	
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
		return ElementByXPath("//span[contains(text(),'Deposit')] | //span[contains(text(),'Wallet')]") != null;
	    //return true;
    }
//==================//
//save Login Cookies 
//==================//	



//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {

	
      var ExitButton = ElementByXPath("//span[contains(text(),'Deposit')] | //span[contains(text(),'Wallet')]");
	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		//GoToUrl("https://primedice.com/?modal=login");

        Driver.Navigate().Refresh(); //that not enter multiple content in input
		Wait();		
		Wait(6);
		
        var PopUp = ElementByXPath("//div[contains(@class,'styles__Card')]");
	    if (IsVisible(PopUp))
	    {
         var ClosePopUp = ElementByXPath("//button[contains(@class,'styles__CloseButton')]");
         Click(ClosePopUp);
		 Log("ClosePopUp");
        }

        Wait(5);

        var LogInButton = ElementByXPath("//span[contains(text(),'Login')]");
	    if (IsVisible(LogInButton))
	    {
         Click(LogInButton);
        }

        Wait(3);

        var box_user = ElementByXPath("//input[contains(@name,'email')]");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[contains(@name,'password')]");
        SetText(box_pass, GetPassword("Password"));

		Wait(2);
		
        var ButtonLog = ElementByXPath("//button[contains(@type,'submit')]");
        Click(ButtonLog);
		Wait();	

		Wait(3);
        var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2')]"); 
        if (IsVisible(RecaptchaOpen_Iframe))
        {
          //SolveCaptcha if apper
          var result = base.DoSolveCaptcha();
          if (result > 0)
          {
              return Fail("Fail solving captcha");
							
          }
          RecaptchaUtility utility = new RecaptchaUtility(this);
          utility.DoSolve();
        }

        Click(ButtonLog); //click again
		Wait();	
		
	 } // end ExitButton
        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {
	  
     //=======//
     //Vault
     //=======//

     if (GetBoolSetting("Vault_Withdraw"))
     {
		Log("Vault_Withdraw");
		GoToUrl("https://primedice.com/?currency=eth&modal=vault&operation=withdraw");
        Wait(2);
		
        Choose_Coin_Function();	//call
		
		Wait(2);
		
        Vault_Function();	//call
		
		Wait(2);	
		
	 }//end Vault_Withdraw


     if (GetBoolSetting("Vault_Deposit"))
     {
		Log("Vault_Deposit");
		GoToUrl("https://primedice.com/?currency=eth&modal=vault&operation=deposit");
        Wait(2);
		
        Choose_Coin_Function();	//call
		
		Wait(2);
		
        Vault_Function();	//call
		
		Wait(2);	
		
	 }//end Vault_Deposit
	 
     //=============//	 

	  
     //=============//
     //AffWithdraw
     //=============// 
     if (GetBoolSetting("AffWithdraw"))
     {
	 
		Log("AffWithdraw");
		GoToUrl("https://Primedice.com/affiliate/funds");

        var WithdrawCommission = ElementByXPath("//button[@class='Button-sc-1n30nq3-0 dyQPHX' and not (@disabled) ]");
        if (IsVisible(WithdrawCommission))
        {		
		Log("WithdrawCommission");		
        Click(WithdrawCommission);
        }//end WithdrawCommission
		
	 }//end AffWithdraw
     //=============//	 
 
		//======//
		//Rakeback//
		//======//
        if (GetBoolSetting("Rakeback"))
        {	
          GoToUrl("https://primedice.com/?currency=btc&modal=vipRakeback");
	      Log("Go to try - Rakeback");	
	      Wait();
	      Wait(2);	

          var RakebackAvailable = ElementByXPath("//a[contains(@href,'Rakeback')]/span[contains(text(),'Rakeback')]"); 
          if (IsVisible(RakebackAvailable))
          {
            All_Function(); //call
	        Log("Rakeback - here");
          }
		
        } //end RakebackAvailable
		//======//
		

		//======//
		//Reload//
		//======//
        if (GetBoolSetting("Reload"))
        {	
          GoToUrl("https://primedice.com/?currency=btc&modal=vipReload");
	      Log("Go to try - Reload");	
	      Wait();
	      Wait(2);	

          var ReloadAvailable = ElementByXPath("//a[contains(@href,'Reload')]/span[contains(text(),'Reload')]"); 
          if (IsVisible(ReloadAvailable))
          {
            All_Function(); //call	
	        Log("Reload - here");
          }
		
        } //end ReloadAvailable
		//======//

		return Time_Function(); //call to function time
	
        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	

	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This mdogeod gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet mdogeods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start mdogeod)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }

	
        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {
			
           var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]") ;
		   var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]") ;

           if (IsVisible(MinVar))
           {
	         Log("WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[0])*60;
             sec = Convert.ToInt32(SecVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[1]);
             return min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("return to your time"); 
		        return GetWaitSetting();
           }

           return 0;		
        }//end Time_Function
        //=================//	


        //=========//
        //All_Function
		//=========//
        public void All_Function()
        {	
		
          Choose_Coin_Function(); //call
		  
          var CheckAvailableGeneral = ElementByXPath("//span[contains(text(),'Next claim available')] | //span[contains(text(),'None yet')]"); 
          if (!IsVisible(CheckAvailableGeneral)) 
          {	
		    Log("faucet visible - do stuff");

            var CheckClaim = ElementByXPath("//div[contains(@class,'styles__Buttons')]//button[contains(@class,'Button__StyledButton') and (@disabled) ]"); 
            if (!IsVisible(CheckClaim))
            {	

              var Claim1VAR = ElementByXPath("//div[contains(@class,'styles__ButtonsWrap')]//span[contains(text(),'Claim')] "); //click on the claim 1
              Click(Claim1VAR);
              Log("claim 1 - try");
			  
              var ReCaptchaIframe = ElementByXPath("//iframe[contains(@src,'recaptcha/api2')]"); 
              if (IsVisible(ReCaptchaIframe))
              {	
		        Log("Reload - call to solve captch");
                var result = DoSolveCaptcha(); //call to solve captch		 
				
                var Claim2VAR = ElementByXPath("//div[contains(@class,'styles__ButtonsWrap')]//span[contains(text(),'Claim')] "); //click on the claim 2
                Click(Claim2VAR);
                Log("claim 2 - Success"); // click again  
				
		        ClaimSuccess(); //Marks the claim as a success
		      }
			  
              if (!IsVisible(ReCaptchaIframe))
              {	
		        Log("RakeBack - Success"); 
		        ClaimSuccess(); //Marks the claim as a success
		      }
			  
	          Wait(2);

            } //CheckClaim
		  
		  }//end CheckAvailableGeneral

		}//end All_Function
		//=========//


        //=========//
        //Vault_Function
		//=========//
        public int Vault_Function()
        {	
		
          //cahck balance
          var balance = ElementByXPath("//span[contains(@class,'NumberAnimation')]//span[contains(@class,'styles__Content')]");
          string BalanceSTRING = balance.Text.Trim().Split('.')[1];
          int BalanceINT = Convert.ToInt32(BalanceSTRING);
		  
          if (BalanceINT < 1) // if under 1
          {
	         Log("LimitFaucet - the balance under 0 <  not good");
          }
		  
          if (BalanceINT > 1 ) // if above "1"
          {
		     Log("LimitFaucet - the balance above 0 > good");	
		  	 
		     var Password_check = ElementByXPath("//input[contains(@name,'password')]"); //the password only apper in "Withdraw" section
             if (IsVisible(Password_check))
             {		
		        var Password_var = ElementByXPath("//input[contains(@name,'password')]");
                SetText(Password_var, GetPassword("Password"));	
				
                Wait(2);		
				
		        var Amount_var = ElementByXPath("//input[contains(@name,'amount')]");
                SetText(Amount_var, GetSetting("Vault_Amount_Withdraw"));  //Withdraw
		     }
		 
             if (!IsVisible(Password_check))
             {			
		        var Amount_var = ElementByXPath("//input[contains(@name,'amount')]");
                SetText(Amount_var, GetSetting("Vault_Amount_Deposit"));  //Deposit
		     }
			 
             Wait(5);
			 
            var Vault_End_Button_Check = ElementByXPath("//div[contains(@class,'styles__Buttons')]//button[contains(@class,'Button__StyledButton') and (@disabled) ]"); 
            if (!IsVisible(Vault_End_Button_Check))
            {	
              var Vault_End_Button_VAR = ElementByXPath("//div[contains(@class,'styles__Buttons')]//button[contains(@class,'Button__StyledButton') and @type='submit' ]");
              Click(Vault_End_Button_VAR);
              Log("Vault - click on end button - deposit or withdraw");
            }		
			 
          } // BalanceINT > 1
		  
          return 0;
		}//end Vault_Function
		//=========//
		
	

      //=========//
      //Choose_Coin_Function
      //=========//
      public int Choose_Coin_Function()
      {	

        var MenuVAR = ElementByXPath("//button[contains(@class,'Button__StyledButton-sc-8bd3dp-0 jXTFLj')]"); 
        if (IsVisible(MenuVAR))
        {
          Log("Menu_Function");				  
		  Click(MenuVAR);			  
		}
		  
	    Wait(2);
	  

        var MenuCoinsVAR = GetSetting("MenuCoins"); 
	    
        if(MenuCoinsVAR=="btc")
        {
        var btc = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[1]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - btc");
        Click(btc);
	    }// end btc

        if(MenuCoinsVAR=="eth")
        {
        var eth = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[2]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - eth");
        Click(eth);
	    }// end eth	  

        if(MenuCoinsVAR=="ltc")
        {
        var ltc = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[3]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - ltc");
        Click(ltc);
	    }// end ltc	  
	    
        if(MenuCoinsVAR=="doge")
        {
        var doge = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[4]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - doge");
        Click(doge);
	    }// end doge 
	    
        if(MenuCoinsVAR=="bch")
        {
        var bch = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[5]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - bch");
        Click(bch);
	    }// end bch
	    
        if(MenuCoinsVAR=="xrp")
        {
        var xrp = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[6]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - xrp");
        Click(xrp);
	    }// end xrp
	    
        if(MenuCoinsVAR=="trx")
        {
        var trx = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[7]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - trx");
        Click(trx);
	    }// end trx
	    
        if(MenuCoinsVAR=="eos")
        {
        var eos = ElementByXPath("//ul[contains(@class,'styles__InversionActionList-sc-3qwmt9-1')]/li[8]/button[contains(@class,'Button__StyledButton')]");
        Log("choose - eos");
        Click(eos);
	    }// end eos

	    Wait(2);

        return 0;

      } // end Choose_Coin_Function
		//=========//
			

	
} //end public class

